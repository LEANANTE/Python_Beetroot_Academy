# Task 3: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä arg_rules - –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤

def arg_rules(type_: type, max_length: int, contains: list):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó

    –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:
    - type_: –æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É
    - max_length: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—É
    - contains: —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤/–ø—ñ–¥—Ä—è–¥–∫—ñ–≤, —è–∫—ñ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç

    –Ø–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î False —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É
    """

    def decorator(func):
        def wrapper(*args, **kwargs):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
            if not args:
                print("No arguments provided")
                return False

            first_arg = args[0]

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 1: –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É
            if not isinstance(first_arg, type_):
                print(f"Argument must be {type_.__name__}, got {type(first_arg).__name__}")
                return False

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 2: –î–æ–≤–∂–∏–Ω–∞ (–¥–ª—è –æ–±'—î–∫—Ç—ñ–≤, —â–æ –º–∞—é—Ç—å –¥–æ–≤–∂–∏–Ω—É)
            if hasattr(first_arg, '__len__'):
                if len(first_arg) > max_length:
                    print(f"Argument length {len(first_arg)} exceeds maximum {max_length}")
                    return False

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 3: –ù–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤/–ø—ñ–¥—Ä—è–¥–∫—ñ–≤
            if contains:
                missing_items = []
                for required in contains:
                    if required not in str(first_arg):
                        missing_items.append(required)

                if missing_items:
                    print(f"Argument must contain {missing_items}")
                    return False

            # –Ø–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            return func(*args, **kwargs)

        return wrapper

    return decorator


# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Task 3
@arg_rules(type_=str, max_length=15, contains=['05', '@'])
def create_slogan_v2(name: str) -> str:
    return f"{name} drinks pepsi in his brand new BMW!"


print("\nTask 3 - Arg rules –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä:")
print("–ü—Ä–∞–≤–∏–ª–∞: type=str, max_length=15, contains=['05', '@']")

# –¢–µ—Å—Ç 1: –¥–æ–≤–≥–∏–π —Ä—è–¥–æ–∫ (–±—ñ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª—ñ–≤)
print("\n –¢–µ—Å—Ç 1: 'johndoe05@gmail.com'")
print("  - –î–æ–≤–∂–∏–Ω–∞: 19 —Å–∏–º–≤–æ–ª—ñ–≤ (–ø–µ—Ä–µ–≤–∏—â—É—î max_length=15)")
print("  - –ú—ñ—Å—Ç–∏—Ç—å '05': ‚úì")
print("  - –ú—ñ—Å—Ç–∏—Ç—å '@': ‚úì")
result1 = create_slogan_v2('johndoe05@gmail.com')
print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
assert create_slogan_v2('johndoe05@gmail.com') is False
print("Assertion –ø—Ä–æ–π–¥–µ–Ω–æ (–ø–æ–≤–µ—Ä–Ω—É—Ç–æ False —á–µ—Ä–µ–∑ –¥–æ–≤–∂–∏–Ω—É)")

# –¢–µ—Å—Ç 2: –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
print("\nüìù –¢–µ—Å—Ç 2: 'S@SH05'")
print("  - –î–æ–≤–∂–∏–Ω–∞: 6 —Å–∏–º–≤–æ–ª—ñ–≤ (< 15) ‚úì")
print("  - –ú—ñ—Å—Ç–∏—Ç—å '05': ‚úì")
print("  - –ú—ñ—Å—Ç–∏—Ç—å '@': ‚úì")
result2 = create_slogan_v2('S@SH05')
print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
assert create_slogan_v2('S@SH05') == 'S@SH05 drinks pepsi in his brand new BMW!'
print("  ‚úÖ Assertion –ø—Ä–æ–π–¥–µ–Ω–æ (–≤—Å—ñ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ)")

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
print("\nüìù –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏:")

print("\n–¢–µ—Å—Ç 3: 'test' (–Ω–µ –º—ñ—Å—Ç–∏—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤)")
result3 = create_slogan_v2('test')
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3} (–º–∞—î –±—É—Ç–∏ False)")

print("\n–¢–µ—Å—Ç 4: 'user@05' (–º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏, –∫–æ—Ä–æ—Ç–∫–∞ –¥–æ–≤–∂–∏–Ω–∞)")
result4 = create_slogan_v2('user@05')
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")

print("\n" + "=" * 50)
print("–í–°–Ü –ó–ê–í–î–ê–ù–ù–Ø –í–ò–ö–û–ù–ê–ù–Ü –£–°–ü–Ü–®–ù–û!")
print("=" * 50)


# Task 3 - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
print("\n3. Arg rules –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä (—Ä—ñ–∑–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó):")

@arg_rules(type_=str, max_length=10, contains=['#'])
def hashtag(tag):
    return f"Hashtag: {tag}"

print(f"   '#python' -> {hashtag('#python')}")
print(f"   'python' (–±–µ–∑ #) -> {hashtag('python')}")
print(f"   '#verylonghashtag' (>10) -> {hashtag('#verylonghashtag')}")